#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('express-demo:server');
var http = require('http');
var _ = require('underscore');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * websocket跟express绑定
 */
let names = new Array();
var io = require('socket.io')(server);
io.on('connection', function (socket) {
  //接收数据
  socket.on('login', function (data) {
    // 存储建立链接的用户socket的id
    let name = socket.id
    if (names.indexOf(name) === -1) {
      names.push(name)
    }
    console.log(names, 'names')
    // 在服务器再建立个客户端，来发送数据给指定用户
    // 发送数据
    socket.emit('reId', {
      msg: name
    });
  });
  socket.on('sayTo', function (data) {
    let toId = data.toId;
    let toSocket = _.findWhere(io.sockets.sockets, { id: toId });
    if (toSocket) {
      toSocket.emit('relogin', 1);
    } else {
      console.log('error:', `'${toId}用户已离开socket'`)
    }
  });
  // 当关闭连接后触发 disconnect 事件
  socket.on('disconnect', function () {
    let name = socket.id;
    if(names.includes(name)){
      console.log('有用户退出')
      names.splice(names.indexOf(name),1)
      console.log(names,'names')
    }
  });

});
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
